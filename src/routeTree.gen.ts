/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LayoutImport } from "./routes/_layout";
import { Route as ItemsIndexImport } from "./routes/items/index";
import { Route as ItemsItemIdImport } from "./routes/items/$itemId";

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: "/_layout",
  getParentRoute: () => rootRoute,
} as any);

const ItemsIndexRoute = ItemsIndexImport.update({
  id: "/items/",
  path: "/items/",
  getParentRoute: () => rootRoute,
} as any);

const ItemsItemIdRoute = ItemsItemIdImport.update({
  id: "/items/$itemId",
  path: "/items/$itemId",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_layout": {
      id: "/_layout";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof LayoutImport;
      parentRoute: typeof rootRoute;
    };
    "/items/$itemId": {
      id: "/items/$itemId";
      path: "/items/$itemId";
      fullPath: "/items/$itemId";
      preLoaderRoute: typeof ItemsItemIdImport;
      parentRoute: typeof rootRoute;
    };
    "/items/": {
      id: "/items/";
      path: "/items";
      fullPath: "/items";
      preLoaderRoute: typeof ItemsIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "": typeof LayoutRoute;
  "/items/$itemId": typeof ItemsItemIdRoute;
  "/items": typeof ItemsIndexRoute;
}

export interface FileRoutesByTo {
  "": typeof LayoutRoute;
  "/items/$itemId": typeof ItemsItemIdRoute;
  "/items": typeof ItemsIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_layout": typeof LayoutRoute;
  "/items/$itemId": typeof ItemsItemIdRoute;
  "/items/": typeof ItemsIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "" | "/items/$itemId" | "/items";
  fileRoutesByTo: FileRoutesByTo;
  to: "" | "/items/$itemId" | "/items";
  id: "__root__" | "/_layout" | "/items/$itemId" | "/items/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRoute;
  ItemsItemIdRoute: typeof ItemsItemIdRoute;
  ItemsIndexRoute: typeof ItemsIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRoute,
  ItemsItemIdRoute: ItemsItemIdRoute,
  ItemsIndexRoute: ItemsIndexRoute,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/items/$itemId",
        "/items/"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx"
    },
    "/items/$itemId": {
      "filePath": "items/$itemId.tsx"
    },
    "/items/": {
      "filePath": "items/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
